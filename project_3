`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Meghana Madhusudanan
// 
// Create Date: 20.12.2024 09:50:06
// Design Name: 
// Module Name: carry_look_ahead_adder
// Project Name: carry look ahead adder
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module carry_look_ahead_adder(input [3:0] A,input [3:0] B,input cin,output [3:0] sum,output cout);
      wire [3:0] P,G,C;
      
      
      assign P=A^B;
      assign G=A&B;
      assign C[0]=cin;
      assign C[1]=G[0]|(P[0]&C[0]);
      assign C[2]=G[1]|(P[1]&(G[0]|(P[0]&C[0])));
      assign C[3]=G[2]|(P[2]&(G[1]|(P[1]&(G[0]|(P[0]&C[0])))));
      assign cout=G[3]|(P[3]&C[3]);
      assign sum=P[3:0]^C[3:0];
 endmodule     
module carry_look_tb;
reg [3:0] A;
reg [3:0] B;
reg cin;
wire [3:0] sum;
wire cout;
carry_look_ahead_adder uut(.A(A),.B(B),.cin(cin),.cout(cout),.sum(sum));
initial begin
#10; A=4'b0000; B=4'b0000; cin=0;
#10;
$display("A=%b,B=%b,cin=%h=>sum=%b,cout=%b",A,B,cin,sum,cout);

#10; A=4'b0001; B=4'b1000; cin=0;
#10;
$display("A=%b,B=%b,cin=%h=>sum=%b,cout=%b",A,B,cin,sum,cout);
#10; A=4'b1001; B=4'b1100; cin=0;
#10;
$display("A=%b,B=%b,cin=%h=>sum=%b,cout=%b",A,B,cin,sum,cout);
#10; A=4'b0001; B=4'b1010; cin=1;
#10;
$display("A=%b,B=%b,cin=%h=>sum=%b,cout=%b",A,B,cin,sum,cout);
$finish;
end
endmodule
